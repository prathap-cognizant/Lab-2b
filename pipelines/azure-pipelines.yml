trigger:
  branches:
    include:
      - main

variables:
  imageName: 'claim-status-api'
  acrName: 'prathapacr'
  resourceGroup: 'prathapRG'
  containerAppName: 'claim-status-app'
  apimName: 'claim-status-apim'
  location: 'eastus'

stages:
# -------------------
# 1. Build Stage
# -------------------
- stage: Build
  displayName: Build and Push using az acr build
  jobs:
  - job: Build
    pool:
      name: Default
    steps:
    - checkout: self

    - task: AzureCLI@2
      displayName: Build Docker Image in ACR
      inputs:
        azureSubscription: 'genai-devops-svc-ch-1'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az acr build --registry $(acrName) --image $(imageName):$(Build.BuildId) src/

# -------------------
# 2. Security Scan Stage
# -------------------
- stage: SecurityScan
  displayName: Security Scan
  dependsOn: Build
  jobs:
  - job: Scan
    pool:
      name: Default
    steps:
    - task: PowerShell@2
      displayName: "Info: Defender for Containers enabled"
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Defender for Containers will auto-scan the image in ACR."

    - task: PowerShell@2
      displayName: "Run Trivy Scan"
      inputs:
        targetType: 'inline'
        script: |
          Invoke-WebRequest -Uri https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.ps1 -OutFile install-trivy.ps1
          .\install-trivy.ps1
          .\trivy.exe image --exit-code 1 --severity CRITICAL,HIGH $(acrName).azurecr.io/$(imageName):$(Build.BuildId)

# -------------------
# 3. Deploy Stage
# -------------------
- stage: Deploy
  displayName: Deploy ACA and APIM using Bicep
  dependsOn: SecurityScan
  jobs:
  - job: Deploy
    pool:
      name: Default
    steps:
    - task: PowerShell@2
      displayName: "Run Trivy Scan"
      inputs:
        targetType: 'inline'
        script: |
          $versions = @("0.67.0", "0.66.0", "0.43.1")
          $zipPath = "$(System.DefaultWorkingDirectory)\trivy.zip"
          $extractPath = "$(System.DefaultWorkingDirectory)\trivy"
          $downloaded = $false

          foreach ($version in $versions) {
            $url = "https://github.com/aquasecurity/trivy/releases/download/v$version/trivy_${version}_Windows-64bit.zip"
            Write-Host "Trying Trivy version $version from $url"
            try {
              Invoke-WebRequest -Uri $url -OutFile $zipPath -ErrorAction Stop
              $downloaded = $true
              break
            } catch {
              Write-Host "Failed to download Trivy v$version"
            }
          }

          if (-not $downloaded) {
            throw "Failed to download any of the fallback Trivy versions."
          }

          Expand-Archive -Path $zipPath -DestinationPath $extractPath -Force
          $trivyExe = Join-Path $extractPath "trivy.exe"
          & $trivyExe image --exit-code 1 --severity CRITICAL,HIGH "$(acrName).azurecr.io/$(imageName):$(Build.BuildId)"